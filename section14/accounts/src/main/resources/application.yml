server:
  port: 8080
spring:
  application:
    name: "accounts"
  profiles:
    active: "prod"
  datasource:
    url: jdbc:h2:mem:testdb
    driverClassName: org.h2.Driver
    username: sa
    password: ''
  h2:
    console:
      enabled: true
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: update
    show-sql: true
  config:
    import: optional:configserver:http://localhost:8071/
  cloud: #spring.cloud.openfeign.circuitbreaker.enabled=true wraps all openfeign client methods with circuit breaker.
    openfeign:
      circuitbreaker:
        enabled: true
    function:
      definition: updateCommunication
    stream:
      bindings:
        updateCommunication-in-0:
          destination: communication-sent
          group: ${spring.application.name}
        sendCommunication-out-0:
          destination: send-communication
      kafka:
        binder:
          brokers:
            - localhost:9092

management:
  endpoints:
    web:
      exposure:
        include: "*"
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true
  endpoint:
    shutdown:
      enabled: true
    health:
      probes:
        enabled: true
  info:
    env:
      enabled: true
  metrics: #Tells micrometer and so prometheus to group all metrics related to account ms under application name "accounts".
    tags:
      application: ${spring.application.name}

endpoints:
  shutdown:
    enabled: true
  health:
    probes:
      enabled: true

eureka:
  instance:
    preferIpAddress: true
  client:
    fetchRegistry: true
    registerWithEureka: true
    serviceUrl:
      defaultZone: "http://localhost:8070/eureka/"

info:
  app:
    name: "accounts"
    description: "Eazy Bank Accounts Application"
    version: "1.0.0"

logging:
  level:
    com:
      eazybytes:
        accounts: DEBUG
  pattern: # This is for opentelemetry
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"

resilience4j.circuitbreaker: #Added for add circuit breaker values for spring.cloud.openfeign.circuitbreaker.enabled=true
  configs:
    default:
      slidingWindowSize: 10 #How many requests initially it has to monitor before it try to change status from close to open.
      permittedNumberOfCallsInHalfOpenState: 2 #Based on how these 2 requests are processed it can decide to go back to close or open state.
      failureRateThreshold: 50 #threshold specifies the percentage of failed calls that will trigger the circuit breaker to open, thereby preventing further calls to a potentially faulty service for a period of time.
      waitDurationInOpenState: 10000

resilience4j.retry:
  configs:
    default:
      maxAttempts: 3
      waitDuration: 500
      enableExponentialBackoff: true
      exponentialBackoffMultiplier: 2
      ignoreExceptions:
        - java.lang.NullPointerException
      retryExceptions:
        - java.util.concurrent.TimeoutException
resilience4j:
  ratelimiter:
    configs:
      default:
        timeout-duration: 1000
        limit-refresh-period: 5000
        limit-for-period: 1

